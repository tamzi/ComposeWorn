
plugins {
  id("com.android.application")
  id("org.jetbrains.kotlin.android")
}

Properties localProperties = new Properties()
def localFile = project.rootProject.file('local.properties')
if (localFile.exists()) {
    localProperties.load(localFile.newDataInputStream())
}

android {
    compileSdk 33

    namespace = "com.tamzi.composeworn"

    defaultConfig {
        applicationId "com.tamzi.composeworn"
        minSdk 26
        targetSdk 30
        versionCode 1
        versionName "1.0"

        applicationId "com.tamzi.composeworn"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        def mapsApiKey = localProperties.getProperty("mapsApiKey", "")
        manifestPlaceholders["mapsApiKey"] = mapsApiKey
        buildConfigField("String", "mapsApiKey", "\"${mapsApiKey}\"")
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
        }
        benchmark {
            initWith buildTypes.release
            signingConfig signingConfigs.debug
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'benchmark-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17.majorVersion
        freeCompilerArgs += "-Xjvm-default=all"
        freeCompilerArgs += "-opt-in=kotlin.RequiresOptIn"
        // Allow for widescale experimental APIs in Alpha libraries we build upon
        freeCompilerArgs += "-opt-in=androidx.wear.compose.material.ExperimentalWearMaterialApi"
        freeCompilerArgs += "-opt-in=androidx.compose.animation.ExperimentalAnimationApi"
    }

    buildFeatures {
        compose true
        buildConfig true
    }
    composeOptions {
        kotlinCompilerExtensionVersion libs.versions.compose.compiler.get()
    }
    packagingOptions {
        resources {
            excludes += "/META-INF/{AL2.0,LGPL2.1}"
        }
    }
}

dependencies {
    // General compose dependencies

    // Uncomment two lines below if you want to use Compose BoM and stable releases
    // def composeBom = platform(libs.androidx.compose.bom)
    // implementation composeBom
    implementation libs.androidx.activity.compose
    implementation libs.compose.ui.tooling.preview
    implementation libs.compose.foundation
    implementation libs.androidx.lifecycle.viewmodel.compose
    implementation libs.compose.material.iconscore
    implementation libs.compose.material.iconsext

    // ViewModel
    implementation libs.androidx.lifecycle.viewmodel.ktx

    // Saved state module for ViewModel
    implementation libs.androidx.lifecycle.viewmodel.savedstate

    implementation libs.androidx.lifecycle.common.java8

    // Compose for Wear OS Dependencies
    // Developer Preview currently Alpha, with new releases coming soon.
    // NOTE: DO NOT INCLUDE a dependency on androidx.compose.material:material.
    // androidx.wear.compose:compose-material is designed as a replacement not an addition to
    // androidx.compose.material:material. If there are features from that you feel are missing from
    // androidx.wear.compose:compose-material please raise a bug to let us know:
    // https://issuetracker.google.com/issues/new?component=1077552&template=1598429&pli=1
    implementation libs.wear.compose.material


    // Foundation is additive, so you can use the mobile version in your Wear OS app.
    implementation libs.wear.compose.foundation

    // If you are using Compose Navigation, use the Wear OS version (NOT the
    // androidx.navigation:navigation-compose version), that is, uncomment the line below.
    implementation libs.wear.compose.navigation
    implementation libs.navigation.ui.ktx

    // Performance
    implementation libs.androidx.metrics.performance

    // Design System
    implementation(project(":worn"))

    // Google Maps
    implementation libs.com.google.maps.compose
    implementation libs.com.google.play.services.maps

    // Horologist
    implementation libs.horologist.composables
    implementation libs.horologist.compose.layout
    implementation libs.wear.input

    implementation libs.androidx.splashscreen
    implementation libs.androidx.tracing.ktx

    // Testing
    testImplementation libs.junit
    // Uncomment the line below if you want to use Compose BoM and stable releases
    // androidTestImplementation composeBom
    androidTestImplementation libs.test.ext.junit
    androidTestImplementation libs.test.espresso.core
    androidTestImplementation libs.compose.ui.test.junit4
    debugImplementation libs.compose.ui.tooling

    androidTestImplementation libs.androidx.test.ext
    androidTestImplementation libs.androidx.test.ext.ktx
    androidTestImplementation libs.androidx.test.espresso.core
    androidTestImplementation libs.compose.ui.test.junit4
    androidTestImplementation libs.compose.ui.test.manifest
}
